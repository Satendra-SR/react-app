name: Continuous Integration

on:
    push:
      branches: [ master ]
    pull_request:
      branches: [ master ]

env:
  YARN_MODULES_CACHE_KEY: v1
  YARN_PACKAGE_CACHE_KEY: v1
  YARN_CACHE_FOLDER: .cache/yarn
  NODE_VERSION: 12

jobs:
  test:
    name: CI
    runs-on: ubuntu-latest

    # strategy:
    #   matrix:
    #     node-version: [12]

    steps:
      - uses: actions/checkout@v1

      - name: Cache Yarn packages
        id: yarn_cache_packages
        uses: actions/cache@v2
        with:
          path: ${{ env.YARN_CACHE_FOLDER }}
          key: ${{ env.YARN_PACKAGE_CACHE_KEY }}-${{ runner.os }}-yarn_cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ env.YARN_PACKAGE_CACHE_KEY }}-${{ runner.os }}-yarn_cache-

      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ env.YARN_MODULES_CACHE_KEY }}-${{ runner.os }}-${{ env.NODE_VERSION }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ env.YARN_MODULES_CACHE_KEY }}-${{ runner.os }}-${{ env.NODE_VERSION }}-yarn-

      # Clear caches on cache miss, otherwise they will grow indefinitely
      # - name: Clear yarn cache
      #   if: steps.yarn_cache_packages.outputs.cache-hit != 'true'
      #   run: yarn cache clean

      # - name: Installing dependencies
      #   run: yarn install --frozen-lockfile --link-duplicates --network-concurrency 1

      - name: Install Dependencies if not Cached
        if: steps.yarn_cache_packages.outputs.cache-hit != 'true'
        run: |
          yarn cache clean
          yarn install

      # - name: Install Dependencies
      #   run: yarn install

      - name: Run test and generate coverage report
        run: yarn test --coverage --watchAll=false
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
